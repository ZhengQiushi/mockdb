// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.14.0
// source: sql_info.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	SQLInfoService_SendSQLInfo_FullMethodName = "/pb.SQLInfoService/SendSQLInfo"
)

// SQLInfoServiceClient is the client API for SQLInfoService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SQLInfoServiceClient interface {
	SendSQLInfo(ctx context.Context, in *SQLInfoRequest, opts ...grpc.CallOption) (*SQLInfoResponse, error)
}

type sQLInfoServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSQLInfoServiceClient(cc grpc.ClientConnInterface) SQLInfoServiceClient {
	return &sQLInfoServiceClient{cc}
}

func (c *sQLInfoServiceClient) SendSQLInfo(ctx context.Context, in *SQLInfoRequest, opts ...grpc.CallOption) (*SQLInfoResponse, error) {
	out := new(SQLInfoResponse)
	err := c.cc.Invoke(ctx, SQLInfoService_SendSQLInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SQLInfoServiceServer is the server API for SQLInfoService service.
// All implementations must embed UnimplementedSQLInfoServiceServer
// for forward compatibility
type SQLInfoServiceServer interface {
	SendSQLInfo(context.Context, *SQLInfoRequest) (*SQLInfoResponse, error)
	mustEmbedUnimplementedSQLInfoServiceServer()
}

// UnimplementedSQLInfoServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSQLInfoServiceServer struct {
}

func (UnimplementedSQLInfoServiceServer) SendSQLInfo(context.Context, *SQLInfoRequest) (*SQLInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendSQLInfo not implemented")
}
func (UnimplementedSQLInfoServiceServer) mustEmbedUnimplementedSQLInfoServiceServer() {}

// UnsafeSQLInfoServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SQLInfoServiceServer will
// result in compilation errors.
type UnsafeSQLInfoServiceServer interface {
	mustEmbedUnimplementedSQLInfoServiceServer()
}

func RegisterSQLInfoServiceServer(s grpc.ServiceRegistrar, srv SQLInfoServiceServer) {
	s.RegisterService(&SQLInfoService_ServiceDesc, srv)
}

func _SQLInfoService_SendSQLInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SQLInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SQLInfoServiceServer).SendSQLInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SQLInfoService_SendSQLInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SQLInfoServiceServer).SendSQLInfo(ctx, req.(*SQLInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SQLInfoService_ServiceDesc is the grpc.ServiceDesc for SQLInfoService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SQLInfoService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.SQLInfoService",
	HandlerType: (*SQLInfoServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendSQLInfo",
			Handler:    _SQLInfoService_SendSQLInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sql_info.proto",
}
